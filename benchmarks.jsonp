load_benchmarks([{"body":"(let ((e (exp x))) (log (+ 1 e)))","arguments":["x"],"operators":["let","exp","log","+"],":cite":["solovyev-et-al-2015"],":precision":"binary64",":pre":"(<= -8 x 8)",":name":"logexp"},{"body":"(let ((sinLat (sin lat)) (cosLon (cos lon))) (+ x (* (* r sinLat) cosLon)))","arguments":["x","r","lat","lon"],"operators":["let","sin","cos","+","*"],":cite":["solovyev-et-al-2015"],":precision":"binary64",":pre":"(and (<= -10 x 10)\n     (<= 0 r 10)\n     (<= -392699/250000 lat 392699/250000)\n     (<= -62831853/20000000 lon 62831853/20000000))",":name":"sphere"},{"body":"(let ((dLon (- lon2 lon1)))\n  (let ((s_lat1 (sin lat1))\n        (c_lat1 (cos lat1))\n        (s_lat2 (sin lat2))\n        (c_lat2 (cos lat2))\n        (s_dLon (sin dLon))\n        (c_dLon (cos dLon)))\n    (atan\n     (/\n      (* c_lat2 s_dLon)\n      (- (* c_lat1 s_lat2) (* (* s_lat1 c_lat2) c_dLon))))))","arguments":["lat1","lat2","lon1","lon2"],"operators":["let","-","sin","cos","atan","/","*"],":cite":["solovyev-et-al-2015"],":precision":"binary64",":pre":"(and (<= 0 lat1 2/5)\n     (<= 1/2 lat2 1)\n     (<= 0 lon1 62831853/20000000)\n     (<= -62831853/20000000 lon2 -1/2))",":name":"azimuth"},{"body":"(-\n (-\n  (-\n   (-\n    (- (* -25 (* (- x1 2) (- x1 2))) (* (- x2 2) (- x2 2)))\n    (* (- x3 1) (- x3 1)))\n   (* (- x4 4) (- x4 4)))\n  (* (- x5 1) (- x5 1)))\n (* (- x6 4) (- x6 4)))","arguments":["x1","x2","x3","x4","x5","x6"],"operators":["-","*"],":precision":"binary64",":pre":"(and (<= 0 x1 6)\n     (<= 0 x2 6)\n     (<= 1 x3 5)\n     (<= 0 x4 6)\n     (<= 0 x5 6)\n     (<= 0 x6 10)\n     (>= (- (+ (* (- x3 3) (- x3 3)) x4) 4) 0)\n     (>= (- (+ (* (- x5 3) (- x5 3)) x6) 4) 0)\n     (>= (+ (- 2 x1) (* 3 x2)) 0)\n     (>= (- (+ 2 x1) x2) 0)\n     (>= (- (- 6 x1) x2) 0)\n     (>= (- (+ x1 x2) 2) 0))",":name":"floudas1"},{"body":"(- (- x1) x2)","arguments":["x1","x2"],"operators":["-"],":precision":"binary64",":pre":"(and (<= 0 x1 3)\n     (<= 0 x2 4)\n     (>=\n      (-\n       (+\n        (- (* 2 (* (* x1 x1) (* x1 x1))) (* (* 8 (* x1 x1)) x1))\n        (* (* 8 x1) x1))\n       x2)\n      0)\n     (>=\n      (-\n       (+\n        (-\n         (+\n          (- (* 4 (* (* x1 x1) (* x1 x1))) (* (* 32 (* x1 x1)) x1))\n          (* (* 88 x1) x1))\n         (* 96 x1))\n        36)\n       x2)\n      0))",":name":"floudas2"},{"body":"(+ (- (* -12 x1) (* 7 x2)) (* x2 x2))","arguments":["x1","x2"],"operators":["+","-","*"],":precision":"binary64",":pre":"(and (<= 0 x1 2) (<= 0 x2 3) (>= (+ (* -2 (* (* x1 x1) (* x1 x1))) 2) x2))",":name":"floudas3"},{"body":"(let ((e1\n       (+\n        (+\n         (* 3 (* (- x1 3689/10000) (- x1 3689/10000)))\n         (* 10 (* (- x2 117/1000) (- x2 117/1000))))\n        (* 30 (* (- x3 2673/10000) (- x3 2673/10000)))))\n      (e2\n       (+\n        (+\n         (* 1/10 (* (- x1 4699/10000) (- x1 4699/10000)))\n         (* 10 (* (- x2 4387/10000) (- x2 4387/10000))))\n        (* 35 (* (- x3 747/1000) (- x3 747/1000)))))\n      (e3\n       (+\n        (+\n         (* 3 (* (- x1 1091/10000) (- x1 1091/10000)))\n         (* 10 (* (- x2 2183/2500) (- x2 2183/2500))))\n        (* 30 (* (- x3 5547/10000) (- x3 5547/10000)))))\n      (e4\n       (+\n        (+\n         (* 1/10 (* (- x1 763/20000) (- x1 763/20000)))\n         (* 10 (* (- x2 5743/10000) (- x2 5743/10000))))\n        (* 35 (* (- x3 2207/2500) (- x3 2207/2500))))))\n  (let ((exp1 (exp (- e1)))\n        (exp2 (exp (- e2)))\n        (exp3 (exp (- e3)))\n        (exp4 (exp (- e4))))\n    (- (+ (+ (+ (* 1 exp1) (* 6/5 exp2)) (* 3 exp3)) (* 16/5 exp4)))))","arguments":["x1","x2","x3"],"operators":["let","+","*","-","exp"],":precision":"binary64",":pre":"(and (<= 0 x1 1) (<= 0 x2 1) (<= 0 x3 1))",":name":"hartman3"},{"body":"(let ((e1\n       (+\n        (+\n         (+\n          (+\n           (+\n            (* 10 (* (- x1 82/625) (- x1 82/625)))\n            (* 3 (* (- x2 106/625) (- x2 106/625))))\n           (* 17 (* (- x3 5569/10000) (- x3 5569/10000))))\n          (* 7/2 (* (- x4 31/2500) (- x4 31/2500))))\n         (* 17/10 (* (- x5 8283/10000) (- x5 8283/10000))))\n        (* 8 (* (- x6 2943/5000) (- x6 2943/5000)))))\n      (e2\n       (+\n        (+\n         (+\n          (+\n           (+\n            (* 1/20 (* (- x1 2329/10000) (- x1 2329/10000)))\n            (* 10 (* (- x2 827/2000) (- x2 827/2000))))\n           (* 17 (* (- x3 8307/10000) (- x3 8307/10000))))\n          (* 1/10 (* (- x4 467/1250) (- x4 467/1250))))\n         (* 8 (* (- x5 251/2500) (- x5 251/2500))))\n        (* 14 (* (- x6 9991/10000) (- x6 9991/10000)))))\n      (e3\n       (+\n        (+\n         (+\n          (+\n           (+\n            (* 3 (* (- x1 587/2500) (- x1 587/2500)))\n            (* 7/2 (* (- x2 1451/10000) (- x2 1451/10000))))\n           (* 17/10 (* (- x3 1761/5000) (- x3 1761/5000))))\n          (* 10 (* (- x4 2883/10000) (- x4 2883/10000))))\n         (* 17 (* (- x5 3047/10000) (- x5 3047/10000))))\n        (* 8 (* (- x6 133/200) (- x6 133/200)))))\n      (e4\n       (+\n        (+\n         (+\n          (+\n           (+\n            (* 17 (* (- x1 4047/10000) (- x1 4047/10000)))\n            (* 8 (* (- x2 2207/2500) (- x2 2207/2500))))\n           (* 1/20 (* (- x3 2183/2500) (- x3 2183/2500))))\n          (* 10 (* (- x4 5743/10000) (- x4 5743/10000))))\n         (* 1/10 (* (- x5 1091/10000) (- x5 1091/10000))))\n        (* 14 (* (- x6 381/10000) (- x6 381/10000))))))\n  (let ((exp1 (exp (- e1)))\n        (exp2 (exp (- e2)))\n        (exp3 (exp (- e3)))\n        (exp4 (exp (- e4))))\n    (- (+ (+ (+ (* 1 exp1) (* 6/5 exp2)) (* 3 exp3)) (* 16/5 exp4)))))","arguments":["x1","x2","x3","x4","x5","x6"],"operators":["let","+","*","-","exp"],":precision":"binary64",":pre":"(and (<= 0 x1 1) (<= 0 x2 1) (<= 0 x3 1) (<= 0 x4 1) (<= 0 x5 1) (<= 0 x6 1))",":name":"hartman6"},{"body":"(+\n (- (- (+ (* x2 x5) (* x3 x6)) (* x2 x3)) (* x5 x6))\n (* x1 (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6)))","arguments":["x1","x2","x3","x4","x5","x6"],"operators":["+","-","*"],":precision":"binary64",":pre":"(and (<= 4 x1 159/25)\n     (<= 4 x2 159/25)\n     (<= 4 x3 159/25)\n     (<= 4 x4 159/25)\n     (<= 4 x5 159/25)\n     (<= 4 x6 159/25))",":name":"kepler0"},{"body":"(-\n (-\n  (-\n   (-\n    (+\n     (+\n      (* (* x1 x4) (- (+ (+ (- x1) x2) x3) x4))\n      (* x2 (+ (+ (- x1 x2) x3) x4)))\n     (* x3 (+ (- (+ x1 x2) x3) x4)))\n    (* (* x2 x3) x4))\n   (* x1 x3))\n  (* x1 x2))\n x4)","arguments":["x1","x2","x3","x4"],"operators":["-","+","*"],":precision":"binary64",":pre":"(and (<= 4 x1 159/25) (<= 4 x2 159/25) (<= 4 x3 159/25) (<= 4 x4 159/25))",":name":"kepler1"},{"body":"(-\n (-\n  (-\n   (-\n    (+\n     (+\n      (* (* x1 x4) (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))\n      (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6)))\n     (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6)))\n    (* (* x2 x3) x4))\n   (* (* x1 x3) x5))\n  (* (* x1 x2) x6))\n (* (* x4 x5) x6))","arguments":["x1","x2","x3","x4","x5","x6"],"operators":["-","+","*"],":precision":"binary64",":pre":"(and (<= 4 x1 159/25)\n     (<= 4 x2 159/25)\n     (<= 4 x3 159/25)\n     (<= 4 x4 159/25)\n     (<= 4 x5 159/25)\n     (<= 4 x6 159/25))",":name":"kepler2"},{"body":"(/ t (+ t 1))","arguments":["t"],"operators":["/","+"],":cite":["solovyev-et-al-2015"],":pre":"(<= 0 t 999)",":name":"intro-example"},{"body":"(let ((t (* x y))) (/ (- t 1) (- (* t t) 1)))","arguments":["x","y"],"operators":["let","*","/","-"],":cite":["solovyev-et-al-2015"],":precision":"binary64",":pre":"(and (<= 1001/1000 x 2) (<= 1001/1000 y 2))",":name":"sec4-example"},{"body":"(let ((p0 (- (+ x0 x1) x2)) (p1 (- (+ x1 x2) x0)) (p2 (- (+ x2 x0) x1)))\n  (+ (+ p0 p1) p2))","arguments":["x0","x1","x2"],"operators":["let","-","+"],":precision":"binary32",":pre":"(and (< 1 x0 2) (< 1 x1 2) (< 1 x2 2))",":name":"test01_sum3"},{"body":"(+ (+ (+ (+ (+ (+ (+ x0 x1) x2) x3) x4) x5) x6) x7)","arguments":["x0","x1","x2","x3","x4","x5","x6","x7"],"operators":["+"],":precision":"binary64",":pre":"(and (< 1 x0 2)\n     (< 1 x1 2)\n     (< 1 x2 2)\n     (< 1 x3 2)\n     (< 1 x4 2)\n     (< 1 x5 2)\n     (< 1 x6 2)\n     (< 1 x7 2))",":name":"test02_sum8"},{"body":"(/ (+ x y) (- x y))","arguments":["x","y"],"operators":["/","+","-"],":precision":"binary64",":pre":"(and (< 0 x 1) (< -1 y -1/10))",":name":"test03_nonlin2"},{"body":"(let ((v2 (* (* w2 (- 0 m2)) (* -3 (* (* 1 (/ a2 w2)) (/ a2 w2)))))\n      (v1 (* (* w1 (- 0 m1)) (* -3 (* (* 1 (/ a1 w1)) (/ a1 w1)))))\n      (v0 (* (* w0 (- 0 m0)) (* -3 (* (* 1 (/ a0 w0)) (/ a0 w0))))))\n  (+ 0 (+ (* v0 1) (+ (* v1 1) (+ (* v2 1) 0)))))","arguments":["m0","m1","m2","w0","w1","w2","a0","a1","a2"],"operators":["let","*","-","/","+"],":precision":"binary64",":pre":"(and (< -1 m0 1)\n     (< -1 m1 1)\n     (< -1 m2 1)\n     (< 1/100000 w0 1)\n     (< 1/100000 w1 1)\n     (< 1/100000 w2 1)\n     (< 1/100000 a0 1)\n     (< 1/100000 a1 1)\n     (< 1/100000 a2 1))",":name":"test04_dqmom9"},{"body":"(let ((r1 (- x 1)) (r2 (* x x))) (/ r1 (- r2 1)))","arguments":["x"],"operators":["let","-","*","/"],":precision":"binary64",":pre":"(< 100001/100000 x 2)",":name":"test05_nonlin1, r4"},{"body":"(/ 1 (+ x 1))","arguments":["x"],"operators":["/","+"],":precision":"binary64",":pre":"(< 100001/100000 x 2)",":name":"test05_nonlin1, test2"},{"body":"(+ (+ (+ x0 x1) x2) x3)","arguments":["x0","x1","x2","x3"],"operators":["+"],":precision":"binary32",":pre":"(and (< -1/100000 x0 100001/100000) (< 0 x1 1) (< 0 x2 1) (< 0 x3 1))",":name":"test06_sums4, sum1"},{"body":"(+ (+ x0 x1) (+ x2 x3))","arguments":["x0","x1","x2","x3"],"operators":["+"],":precision":"binary32",":pre":"(and (< -1/100000 x0 100001/100000) (< 0 x1 1) (< 0 x2 1) (< 0 x3 1))",":name":"test06_sums4, sum2"},{"body":"(- (sqrt (+ x 1)) (sqrt x))","arguments":["x"],"operators":["-","sqrt","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(>= x 0)",":name":"NMSE example 3.1"},{"body":"(- (sin (+ x eps)) (sin x))","arguments":["x","eps"],"operators":["-","sin","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":name":"NMSE example 3.3"},{"body":"(/ (- 1 (cos x)) (sin x))","arguments":["x"],"operators":["/","-","cos","sin"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0)",":name":"NMSE example 3.4"},{"body":"(- (atan (+ N 1)) (atan N))","arguments":["N"],"operators":["-","atan","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":name":"NMSE example 3.5"},{"body":"(- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1))))","arguments":["x"],"operators":["-","/","sqrt","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(>= x 0)",":name":"NMSE example 3.6"},{"body":"(- (/ 1 (+ x 1)) (/ 1 x))","arguments":["x"],"operators":["-","/","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0)",":name":"NMSE problem 3.3.1"},{"body":"(- (tan (+ x eps)) (tan x))","arguments":["x","eps"],"operators":["-","tan","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":name":"NMSE problem 3.3.2"},{"body":"(+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1)))","arguments":["x"],"operators":["+","-","/"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0 1 -1)",":name":"NMSE problem 3.3.3"},{"body":"(- (pow (+ x 1) (/ 1 3)) (pow x (/ 1 3)))","arguments":["x"],"operators":["-","pow","+","/"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(>= x 0)",":name":"NMSE problem 3.3.4"},{"body":"(- (cos (+ x eps)) (cos x))","arguments":["x","eps"],"operators":["-","cos","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":name":"NMSE problem 3.3.5"},{"body":"(- (log (+ N 1)) (log N))","arguments":["N"],"operators":["-","log","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(> N 0)",":name":"NMSE problem 3.3.6"},{"body":"(+ (- (exp x) 2) (exp (- x)))","arguments":["x"],"operators":["+","-","exp"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":name":"NMSE problem 3.3.7"},{"body":"(/ (+ (- b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a))","arguments":["a","b","c"],"operators":["/","+","-","sqrt","*"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(and (>= (* b b) (* 4 (* a c))) (!= a 0))",":name":"NMSE p42, positive"},{"body":"(/ (- (- b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a))","arguments":["a","b","c"],"operators":["/","-","sqrt","*"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(and (>= (* b b) (* 4 (* a c))) (!= a 0))",":name":"NMSE p42, negative"},{"body":"(/ (+ (- b2) (sqrt (- (* b2 b2) (* a c)))) a)","arguments":["a","b2","c"],"operators":["/","+","-","sqrt","*"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(and (>= (* b2 b2) (* a c)) (!= a 0))",":name":"NMSE problem 3.2.1, positive"},{"body":"(/ (- (- b2) (sqrt (- (* b2 b2) (* a c)))) a)","arguments":["a","b2","c"],"operators":["/","-","sqrt","*"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(and (>= (* b2 b2) (* a c)) (!= a 0))",":name":"NMSE problem 3.2.1, negative"},{"body":"(- (exp x) 1)","arguments":["x"],"operators":["-","exp"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":name":"NMSE example 3.7"},{"body":"(- (- (* (+ N 1) (log (+ N 1))) (* N (log N))) 1)","arguments":["N"],"operators":["-","*","+","log"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(> N 0)",":name":"NMSE example 3.8"},{"body":"(- (/ 1 x) (/ 1 (tan x)))","arguments":["x"],"operators":["-","/","tan"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0)",":name":"NMSE example 3.9"},{"body":"(/ (log (- 1 x)) (log (+ 1 x)))","arguments":["x"],"operators":["/","log","-","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(< -1 x 1)",":name":"NMSE example 3.10"},{"body":"(/ (- 1 (cos x)) (* x x))","arguments":["x"],"operators":["/","-","cos","*"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0)",":name":"NMSE problem 3.4.1"},{"body":"(/\n (* eps (- (exp (* (+ a b) eps)) 1))\n (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","arguments":["a","b","eps"],"operators":["/","*","-","exp","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= eps 0)",":name":"NMSE problem 3.4.2"},{"body":"(log (/ (- 1 eps) (+ 1 eps)))","arguments":["eps"],"operators":["log","/","-","+"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(< -1 eps 1)",":name":"NMSE problem 3.4.3"},{"body":"(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","arguments":["x"],"operators":["sqrt","/","-","exp","*"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0)",":name":"NMSE problem 3.4.4"},{"body":"(/ (- x (sin x)) (- x (tan x)))","arguments":["x"],"operators":["/","-","sin","tan"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0)",":name":"NMSE problem 3.4.5"},{"body":"(- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)))","arguments":["x","n"],"operators":["-","pow","+","/"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(>= x 0)",":name":"NMSE problem 3.4.6"},{"body":"(- (exp (* a x)) 1)","arguments":["a","x"],"operators":["-","exp","*"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":name":"NMSE section 3.5"},{"body":"(/ (exp x) (- (exp x) 1))","arguments":["x"],"operators":["/","exp","-"],":cite":["hamming-1987","herbie-2015"],":fpbench-domain":"textbook",":pre":"(!= x 0)",":name":"NMSE section 3.11"},{"body":"(* 1/2 (sqrt (* 2 (+ (sqrt (+ (* re re) (* im im))) re))))","arguments":["re","im"],"operators":["*","sqrt","+"],":cite":["herbie-2015"],":name":"Complex square root"},{"body":"(* (* 1/2 (sin re)) (- (exp (- im)) (exp im)))","arguments":["re","im"],"operators":["*","sin","-","exp"],":cite":["herbie-2015"],":name":"Complex sine and cosine"},{"body":"(/\n (* (pow (/ 1 (+ 1 (exp (- s)))) cp) (pow (- 1 (/ 1 (+ 1 (exp (- s))))) cn))\n (* (pow (/ 1 (+ 1 (exp (- t)))) cp) (pow (- 1 (/ 1 (+ 1 (exp (- t))))) cn)))","arguments":["cp","cn","t","s"],"operators":["/","*","pow","+","exp","-"],":cite":["herbie-2015"],":pre":"(and (< 0 cp) (< 0 cn))",":name":"Probabilities in a clustering algorithm"},{"body":"(let ((dppi (acos -1)))\n  (let ((h (/ dppi n)))\n    (while\n     (<= i n)\n     ((s1\n       0\n       (let ((t2\n              (let ((x (* i h)))\n                (while\n                 (<= k 5)\n                 ((d0\n                   (! :precision binary32 2)\n                   (! :precision binary32 (* 2 d0)))\n                  (t0 x (+ t0 (/ (sin (* d0 x)) d0)))\n                  (k 1 (+ k 1)))\n                 t0))))\n         (let ((s0 (sqrt (+ (* h h) (* (- t2 t1) (- t2 t1))))))\n           (! :precision binary128 (+ s1 s0)))))\n      (t1\n       0\n       (let ((t2\n              (let ((x (* i h)))\n                (while\n                 (<= k 5)\n                 ((d0\n                   (! :precision binary32 2)\n                   (! :precision binary32 (* 2 d0)))\n                  (t0 x (+ t0 (/ (sin (* d0 x)) d0)))\n                  (k 1 (+ k 1)))\n                 t0))))\n         t2))\n      (i 1 (+ i 1)))\n     s1)))","arguments":["n"],"operators":["let","acos","/","while","<=","*","+","sin","sqrt","-"],":cite":["precimonious-2013"],":precision":"binary64",":pre":"(>= n 0)",":name":"arclength"},{"body":"(let ((t1 (+ 1657/5 (* 3/5 T)))) (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))))","arguments":["u","v","T"],"operators":["let","+","*","/","-"],":cite":["darulova-kuncak-2014"],":fpbench-domain":"science",":precision":"binary64",":pre":"(and (<= -100 u 100) (<= 20 v 20000) (<= -30 T 50))",":name":"doppler1",":rosa-ensuring":"1/1000000000000"},{"body":"(let ((t1 (+ 1657/5 (* 3/5 T)))) (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))))","arguments":["u","v","T"],"operators":["let","+","*","/","-"],":cite":["darulova-kuncak-2014"],":fpbench-domain":"science",":precision":"binary64",":pre":"(and (<= -125 u 125) (<= 15 v 25000) (<= -40 T 60))",":name":"doppler2"},{"body":"(let ((t1 (+ 1657/5 (* 3/5 T)))) (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))))","arguments":["u","v","T"],"operators":["let","+","*","/","-"],":cite":["darulova-kuncak-2014"],":fpbench-domain":"science",":precision":"binary64",":pre":"(and (<= -30 u 120) (<= 320 v 20300) (<= -50 T 30))",":name":"doppler3"},{"body":"(- (- (- (- (* x1 x2)) (* (* 2 x2) x3)) x1) x3)","arguments":["x1","x2","x3"],"operators":["-","*"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"science",":precision":"binary64",":pre":"(and (<= -15 x1 15) (<= -15 x2 15) (<= -15 x3 15))",":name":"rigidBody1"},{"body":"(-\n (+\n  (- (+ (* (* (* 2 x1) x2) x3) (* (* 3 x3) x3)) (* (* (* x2 x1) x2) x3))\n  (* (* 3 x3) x3))\n x2)","arguments":["x1","x2","x3"],"operators":["-","+","*"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"science",":precision":"binary64",":pre":"(and (<= -15 x1 15) (<= -15 x2 15) (<= -15 x3 15))",":name":"rigidBody2"},{"body":"(let ((t (- (+ (* (* 3 x1) x1) (* 2 x2)) x1))\n      (t* (- (- (* (* 3 x1) x1) (* 2 x2)) x1))\n      (d (+ (* x1 x1) 1)))\n  (let ((s (/ t d)) (s* (/ t* d)))\n    (+\n     x1\n     (+\n      (+\n       (+\n        (+\n         (* (+ (* (* (* 2 x1) s) (- s 3)) (* (* x1 x1) (- (* 4 s) 6))) d)\n         (* (* (* 3 x1) x1) s))\n        (* (* x1 x1) x1))\n       x1)\n      (* 3 s*)))))","arguments":["x1","x2"],"operators":["let","-","+","*","/"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"controls",":precision":"binary64",":pre":"(and (<= -5 x1 5) (<= -20 x2 5))",":name":"jetEngine"},{"body":"(-\n (-\n  (+ 3 (/ 2 (* r r)))\n  (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v)))\n 9/2)","arguments":["v","w","r"],"operators":["-","+","/","*"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"controls",":precision":"binary64",":pre":"(and (<= -9/2 v -3/10) (<= 2/5 w 9/10) (<= 19/5 r 39/5))",":name":"turbine1"},{"body":"(- (- (* 6 v) (/ (* (* 1/2 v) (* (* (* w w) r) r)) (- 1 v))) 5/2)","arguments":["v","w","r"],"operators":["-","*","/"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"controls",":precision":"binary64",":pre":"(and (<= -9/2 v -3/10) (<= 2/5 w 9/10) (<= 19/5 r 39/5))",":name":"turbine2"},{"body":"(-\n (-\n  (- 3 (/ 2 (* r r)))\n  (/ (* (* 1/8 (+ 1 (* 2 v))) (* (* (* w w) r) r)) (- 1 v)))\n 1/2)","arguments":["v","w","r"],"operators":["-","/","*","+"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"controls",":precision":"binary64",":pre":"(and (<= -9/2 v -3/10) (<= 2/5 w 9/10) (<= 19/5 r 39/5))",":name":"turbine3"},{"body":"(let ((r 4) (K 111/100)) (/ (* r x) (+ 1 (/ x K))))","arguments":["x"],"operators":["let","/","*","+"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"science",":precision":"binary64",":pre":"(<= 1/10 x 3/10)",":name":"verhulst"},{"body":"(let ((r 4) (K 111/100)) (/ (* (* r x) x) (+ 1 (* (/ x K) (/ x K)))))","arguments":["x"],"operators":["let","/","*","+"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"science",":precision":"binary64",":pre":"(<= 1/10 x 3/10)",":name":"predatorPrey"},{"body":"(let ((p 35000000)\n      (a 401/1000)\n      (b 427/10000000)\n      (t 300)\n      (n 1000)\n      (k 13806503/1000000000000000000000000000000))\n  (- (* (+ p (* (* a (/ n v)) (/ n v))) (- v (* n b))) (* (* k n) t)))","arguments":["v"],"operators":["let","-","*","+","/"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"science",":precision":"binary64",":pre":"(<= 1/10 v 1/2)",":name":"carbonGas"},{":rosa-post":"(=> res (< -1 res 1))","body":"(-\n (+ (- x (/ (* (* x x) x) 6)) (/ (* (* (* (* x x) x) x) x) 120))\n (/ (* (* (* (* (* (* x x) x) x) x) x) x) 5040))","arguments":["x"],"operators":["-","+","/","*"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"mathematics",":precision":"binary64",":pre":"(< -157079632679/100000000000 x 157079632679/100000000000)",":name":"sine",":rosa-ensuring":"1/100000000000000"},{"body":"(-\n (+ (- (+ 1 (* 1/2 x)) (* (* 1/8 x) x)) (* (* (* 1/16 x) x) x))\n (* (* (* (* 5/128 x) x) x) x))","arguments":["x"],"operators":["-","+","*"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"mathematics",":pre":"(<= 0 x 1)",":name":"sqroot"},{":rosa-post":"(=> res (< -1 res 1))","body":"(-\n (* 238732414637843/250000000000000 x)\n (* 6450306886639899/50000000000000000 (* (* x x) x)))","arguments":["x"],"operators":["-","*"],":cite":["darulova-kuncak-2014","solovyev-et-al-2015"],":fpbench-domain":"mathematics",":precision":"binary64",":pre":"(< -2 x 2)",":name":"sineOrder3",":rosa-ensuring":"1/100000000000000"},{"body":"(let ((a 3) (b 7/2))\n  (let ((discr (- (* b b) (* (* a c) 4))))\n    (if (> (- (* b b) (* a c)) 10)\n      (if (> b 0)\n        (/ (* c 2) (- (- b) (sqrt discr)))\n        (if (< b 0)\n          (/ (+ (- b) (sqrt discr)) (* a 2))\n          (/ (+ (- b) (sqrt discr)) (* a 2))))\n      (/ (+ (- b) (sqrt discr)) (* a 2)))))","arguments":["c"],"operators":["let","-","*","if",">","/","sqrt","<","+"],":cite":["darulova-kuncak-2014"],":fpbench-domain":"mathematics",":pre":"(let ((a 3) (b 7/2)) (and (<= -2 c 2) (> (- (* b b) (* (* a c) 4)) 1/10)))",":name":"smartRoot",":rosa-ensuring":"3/500000000000000"},{":rosa-post":"(=> res (<= 0 res 3))","body":"(if (>= (- (* x x) x) 0) (/ x 10) (+ (* x x) 2))","arguments":["x"],"operators":["if",">=","-","*","/","+"],":cite":["darulova-kuncak-2014"],":pre":"(< 0 x 10)",":name":"cav10",":rosa-ensuring":"3"},{"body":"(if (< x 1/100000) (+ 1 (* 1/2 x)) (sqrt (+ 1 x)))","arguments":["x"],"operators":["if","<","+","*","sqrt"],":cite":["darulova-kuncak-2014"],":pre":"(< 0 x 10)",":name":"squareRoot3",":rosa-ensuring":"1/10000000000"},{"body":"(if (< x 1/10000) (+ 1 (* 1/2 x)) (sqrt (+ 1 x)))","arguments":["x"],"operators":["if","<","+","*","sqrt"],":cite":["darulova-kuncak-2014"],":pre":"(< 0 x 10)",":name":"squareRoot3Invalid",":rosa-ensuring":"1/10000000000"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 9 a 9) (<= 471/100 b 489/100) (<= 471/100 c 489/100))",":name":"triangle"},{":rosa-post":"(=> res (<= 29/100 res 351/10))","body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/10))\n     (> (+ a c) (+ b 1/10))\n     (> (+ b c) (+ a 1/10)))",":name":"triangle1",":rosa-ensuring":"27/1000000000000"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/100))\n     (> (+ a c) (+ b 1/100))\n     (> (+ b c) (+ a 1/100)))",":name":"triangle2"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/1000))\n     (> (+ a c) (+ b 1/1000))\n     (> (+ b c) (+ a 1/1000)))",":name":"triangle3"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/10000))\n     (> (+ a c) (+ b 1/10000))\n     (> (+ b c) (+ a 1/10000)))",":name":"triangle4"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/100000))\n     (> (+ a c) (+ b 1/100000))\n     (> (+ b c) (+ a 1/100000)))",":name":"triangle5"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/1000000))\n     (> (+ a c) (+ b 1/1000000))\n     (> (+ b c) (+ a 1/1000000)))",":name":"triangle6"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/10000000))\n     (> (+ a c) (+ b 1/10000000))\n     (> (+ b c) (+ a 1/10000000)))",":name":"triangle7"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/100000000))\n     (> (+ a c) (+ b 1/100000000))\n     (> (+ b c) (+ a 1/100000000)))",":name":"triangle8"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/1000000000))\n     (> (+ a c) (+ b 1/1000000000))\n     (> (+ b c) (+ a 1/1000000000)))",":name":"triangle9"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/10000000000))\n     (> (+ a c) (+ b 1/10000000000))\n     (> (+ b c) (+ a 1/10000000000)))",":name":"triangle10"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/100000000000))\n     (> (+ a c) (+ b 1/100000000000))\n     (> (+ b c) (+ a 1/100000000000)))",":name":"triangle11"},{"body":"(let ((s (/ (+ (+ a b) c) 2))) (sqrt (* (* (* s (- s a)) (- s b)) (- s c))))","arguments":["a","b","c"],"operators":["let","/","+","sqrt","*","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/1000000000000))\n     (> (+ a c) (+ b 1/1000000000000))\n     (> (+ b c) (+ a 1/1000000000000)))",":name":"triangle12"},{":rosa-post":"(=> res (<= -17/100 res 1/20))","body":"(/ (- (* (* u u) u)) 6)","arguments":["u"],"operators":["/","-","*"],":cite":["darulova-kuncak-2014"],":pre":"(<= 0 u 1)",":name":"bspline3",":rosa-ensuring":"1/100000000000"},{":rosa-post":"(=> res (>= res 0))","body":"(if (< a b)\n  (/\n   (sqrt (* (* (* (+ c (+ b a)) (- a (- c b))) (+ a (- c b))) (+ c (- b a))))\n   4)\n  (/\n   (sqrt (* (* (* (+ c (+ a b)) (- b (- c a))) (+ b (- c a))) (+ c (- a b))))\n   4))","arguments":["a","b","c"],"operators":["if","<","/","sqrt","*","+","-"],":cite":["darulova-kuncak-2014"],":pre":"(and (<= 1 a 9)\n     (<= 1 b 9)\n     (<= 1 c 9)\n     (> (+ a b) (+ c 1/1000000))\n     (> (+ a c) (+ b 1/1000000))\n     (> (+ b c) (+ a 1/1000000))\n     (< a c)\n     (< b c))",":example":"((b 4) (c 17/2))",":name":"triangleSorted",":rosa-ensuring":"1/500000000"},{"body":"(let ((dt 1/10) (solarMass 3947841760435743/100000000000000))\n  (while\n   (< i 100)\n   ((x\n     x0\n     (let ((distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))))\n       (let ((mag (/ dt (* (* distance distance) distance))))\n         (let ((vxNew (- vx (* (* x solarMass) mag)))) (+ x (* dt vxNew))))))\n    (y\n     y0\n     (let ((distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))))\n       (let ((mag (/ dt (* (* distance distance) distance))))\n         (let ((vyNew (- vy (* (* y solarMass) mag)))) (+ y (* dt vyNew))))))\n    (z\n     z0\n     (let ((distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))))\n       (let ((mag (/ dt (* (* distance distance) distance))))\n         (let ((vzNew (- vz (* (* z solarMass) mag)))) (+ z (* dt vzNew))))))\n    (vx\n     vx0\n     (let ((distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))))\n       (let ((mag (/ dt (* (* distance distance) distance))))\n         (- vx (* (* x solarMass) mag)))))\n    (vy\n     vy0\n     (let ((distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))))\n       (let ((mag (/ dt (* (* distance distance) distance))))\n         (- vy (* (* y solarMass) mag)))))\n    (vz\n     vz0\n     (let ((distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))))\n       (let ((mag (/ dt (* (* distance distance) distance))))\n         (- vz (* (* z solarMass) mag)))))\n    (i 0 (+ i 1)))\n   x))","arguments":["x0","y0","z0","vx0","vy0","vz0"],"operators":["let","while","<","sqrt","+","*","/","-"],":fpbench-domain":"science",":pre":"(and (< -6 x0 6)\n     (< -6 y0 6)\n     (< -1/5 z0 1/5)\n     (< -3 vx0 3)\n     (< -3 vy0 3)\n     (< -1/10 vz0 1/10))",":name":"N Body Simulation"},{"body":"(let ((h 1/100) (L 2) (m 3/2) (g 196133/20000))\n  (while\n   (< n N)\n   ((t\n     t0\n     (let ((k1w (* (/ (- g) L) (sin t))))\n       (let ((k2t (+ w (* (/ h 2) k1w)))) (+ t (* h k2t)))))\n    (w\n     w0\n     (let ((k2w (* (/ (- g) L) (sin (+ t (* (/ h 2) w)))))) (+ w (* h k2w))))\n    (n 0 (+ n 1)))\n   t))","arguments":["t0","w0","N"],"operators":["let","while","<","*","/","-","sin","+"],":fpbench-domain":"science",":pre":"(and (< -2 t0 2) (< -5 w0 5))",":example":"((N 1000))",":name":"Pendulum"},{"body":"(while\n (< i 10)\n ((x\n   x0\n   (-\n    x\n    (/\n     (+ (+ (- x (/ (pow x 3) 6)) (/ (pow x 5) 120)) (/ (pow x 7) 5040))\n     (+ (+ (- 1 (/ (* x x) 2)) (/ (pow x 4) 24)) (/ (pow x 6) 720)))))\n  (i 0 (+ i 1)))\n x)","arguments":["x0"],"operators":["while","<","-","/","+","pow","*"],":fpbench-domain":"mathematics",":pre":"(< -1 x0 1)",":name":"Sine Newton"},{"body":"(while\n (< t 1000)\n ((x\n   0\n   (let ((cosi\n          (let ((arg\n                 (let ((delta_theta\n                        (let ((inv_l 1/10)\n                              (delta_dl (let ((c 617/50)) (* c sl)))\n                              (delta_dr (let ((c 617/50)) (* c sr))))\n                          (* (- delta_dr delta_dl) inv_l))))\n                   (+ theta (* delta_theta 1/2)))))\n            (+\n             (- 1 (* (* arg arg) 1/2))\n             (* (* (* (* arg arg) arg) arg) 208333333/5000000000))))\n         (delta_d\n          (let ((delta_dr (let ((c 617/50)) (* c sr)))\n                (delta_dl (let ((c 617/50)) (* c sl))))\n            (* (+ delta_dl delta_dr) 1/2))))\n     (+ x (* delta_d cosi))))\n  (y\n   0\n   (let ((sini\n          (let ((arg\n                 (let ((delta_theta\n                        (let ((inv_l 1/10)\n                              (delta_dl (let ((c 617/50)) (* c sl)))\n                              (delta_dr (let ((c 617/50)) (* c sr))))\n                          (* (- delta_dr delta_dl) inv_l))))\n                   (+ theta (* delta_theta 1/2)))))\n            (+\n             (- arg (* (* (* arg arg) arg) 833333333/5000000000))\n             (* (* (* (* (* arg arg) arg) arg) arg) 8333333/1000000000))))\n         (delta_d\n          (let ((delta_dr (let ((c 617/50)) (* c sr)))\n                (delta_dl (let ((c 617/50)) (* c sl))))\n            (* (+ delta_dl delta_dr) 1/2))))\n     (+ y (* delta_d sini))))\n  (theta\n   -197/200\n   (let ((delta_theta\n          (let ((inv_l 1/10)\n                (delta_dl (let ((c 617/50)) (* c sl)))\n                (delta_dr (let ((c 617/50)) (* c sr))))\n            (* (- delta_dr delta_dl) inv_l))))\n     (+ theta delta_theta)))\n  (t 0 (+ t 1))\n  (j 0 (if (== j 50) 0 (+ j 1)))\n  (tmp 0 (if (== j 50) sl tmp))\n  (sl sl* (if (== j 50) sr sl))\n  (sr sr* (if (== j 50) (let ((tmp sl)) tmp) sr)))\n x)","arguments":["sr*","sl*"],"operators":["while","<","let","*","-","+","if","=="],":cite":["damouche-martel-chapoutot-fmics15"],":fpbench-domain":"controls",":precision":"binary32",":pre":"(and (< 1/20 sl* (* 2 PI)) (< 1/20 sr* (* 2 PI)))",":example":"((sr* 785398163397/10000000000000) (sl* 525398163397/10000000000000))",":name":"Odometry",":description":"Compute the position of a robot from the speed of the wheels.\nInputs: Speed `sl`, `sr` of the left and right wheel, in rad/s."},{"body":"(while\n (< t 1000)\n ((x\n   0\n   (let ((cosi\n          (let ((arg\n                 (let ((delta_theta\n                        (let ((inv_l 1/10)\n                              (delta_dl (let ((c 617/50)) (* c sl)))\n                              (delta_dr (let ((c 617/50)) (* c sr))))\n                          (* (- delta_dr delta_dl) inv_l))))\n                   (+ theta (* delta_theta 1/2)))))\n            (+\n             (- 1 (* (* arg arg) 1/2))\n             (* (* (* (* arg arg) arg) arg) 208333333/5000000000))))\n         (delta_d\n          (let ((delta_dr (let ((c 617/50)) (* c sr)))\n                (delta_dl (let ((c 617/50)) (* c sl))))\n            (* (+ delta_dl delta_dr) 1/2))))\n     (+ x (* delta_d cosi))))\n  (y\n   0\n   (let ((sini\n          (let ((arg\n                 (let ((delta_theta\n                        (let ((inv_l 1/10)\n                              (delta_dl (let ((c 617/50)) (* c sl)))\n                              (delta_dr (let ((c 617/50)) (* c sr))))\n                          (* (- delta_dr delta_dl) inv_l))))\n                   (+ theta (* delta_theta 1/2)))))\n            (+\n             (- arg (* (* (* arg arg) arg) 833333333/5000000000))\n             (* (* (* (* (* arg arg) arg) arg) arg) 8333333/1000000000))))\n         (delta_d\n          (let ((delta_dr (let ((c 617/50)) (* c sr)))\n                (delta_dl (let ((c 617/50)) (* c sl))))\n            (* (+ delta_dl delta_dr) 1/2))))\n     (+ y (* delta_d sini))))\n  (theta\n   -197/200\n   (let ((delta_theta\n          (let ((inv_l 1/10)\n                (delta_dl (let ((c 617/50)) (* c sl)))\n                (delta_dr (let ((c 617/50)) (* c sr))))\n            (* (- delta_dr delta_dl) inv_l))))\n     (+ theta delta_theta)))\n  (t 0 (+ t 1))\n  (j 0 (if (== j 50) 0 (+ j 1)))\n  (tmp 0 (if (== j 50) sl tmp))\n  (sl sl* (if (== j 50) sr sl))\n  (sr sr* (if (== j 50) (let ((tmp sl)) tmp) sr)))\n y)","arguments":["sr*","sl*"],"operators":["while","<","let","*","-","+","if","=="],":cite":["damouche-martel-chapoutot-fmics15"],":fpbench-domain":"controls",":precision":"binary32",":pre":"(and (< 1/20 sl* (* 2 PI)) (< 1/20 sr* (* 2 PI)))",":example":"((sr* 785398163397/10000000000000) (sl* 525398163397/10000000000000))",":name":"Odometry",":description":"Compute the position of a robot from the speed of the wheels.\nInputs: Speed `sl`, `sr` of the left and right wheel, in rad/s."},{"body":"(while\n (< t 100)\n ((i 0 (let ((e (- c m)) (dt 1/5)) (+ i (* (* ki dt) e))))\n  (m\n   m\n   (let ((r\n          (let ((d\n                 (let ((e (- c m)) (invdt (let ((dt 1/5)) (/ 1 dt))))\n                   (* (* kd invdt) (- e eold))))\n                (i (let ((e (- c m)) (dt 1/5)) (+ i (* (* ki dt) e))))\n                (p (let ((e (- c m))) (* kp e))))\n            (+ (+ p i) d))))\n     (+ m (* 1/100 r))))\n  (eold 0 (let ((e (- c m))) e))\n  (t 0 (let ((dt 1/5)) (+ t dt))))\n m)","arguments":["m","kp","ki","kd","c"],"operators":["while","<","let","-","+","*","/"],":cite":["damouche-martel-chapoutot-nsv14","damouche-martel-chapoutot-fmics15"],":fpbench-domain":"controls",":precision":"binary64",":pre":"(and (< -10 m 10) (< -10 c 10))",":example":"((m -5) (kp 47257/5000) (ki 34503/50000) (kd 14227/5000))",":name":"PID",":description":"Keep a measure at its setpoint using a PID controller.\nInputs: Measure `m`; gains `kp`, `ki`, `kd`; setpoint `c`"},{"body":"(while\n (let ((eps 1/200)) (> e eps))\n ((t 0 (+ t 1/10))\n  (i 0 (+ i 1))\n  (y_n\n   y_n*\n   (let ((y_n1\n          (let ((k4\n                 (let ((k3\n                        (let ((k2\n                               (let ((k1\n                                      (let ((k 6/5))\n                                        (* (* k (- c y_n)) (- c y_n))))\n                                     (k 6/5))\n                                 (*\n                                  (* k (- c (+ y_n (* (* 1/2 h) k1))))\n                                  (- c (+ y_n (* (* 1/2 h) k1))))))\n                              (k 6/5))\n                          (*\n                           (* k (- c (+ y_n (* (* 1/2 h) k2))))\n                           (- c (+ y_n (* (* 1/2 h) k2))))))\n                       (k 6/5))\n                   (* (* k (- c (+ y_n (* h k3)))) (- c (+ y_n (* h k3))))))\n                (k3\n                 (let ((k2\n                        (let ((k1\n                               (let ((k 6/5)) (* (* k (- c y_n)) (- c y_n))))\n                              (k 6/5))\n                          (*\n                           (* k (- c (+ y_n (* (* 1/2 h) k1))))\n                           (- c (+ y_n (* (* 1/2 h) k1))))))\n                       (k 6/5))\n                   (*\n                    (* k (- c (+ y_n (* (* 1/2 h) k2))))\n                    (- c (+ y_n (* (* 1/2 h) k2))))))\n                (k2\n                 (let ((k1 (let ((k 6/5)) (* (* k (- c y_n)) (- c y_n))))\n                       (k 6/5))\n                   (*\n                    (* k (- c (+ y_n (* (* 1/2 h) k1))))\n                    (- c (+ y_n (* (* 1/2 h) k1))))))\n                (k1 (let ((k 6/5)) (* (* k (- c y_n)) (- c y_n))))\n                (sixieme (/ 1 6)))\n            (+ y_n (* (* sixieme h) (+ (+ (+ k1 (* 2 k2)) (* 2 k3)) k4))))))\n     y_n1))\n  (e 1 (let ((eps 1/200)) (- e eps))))\n i)","arguments":["h","y_n*","c"],"operators":["while","let",">","+","*","-","/"],":cite":["damouche-martel-chapoutot-fmics15"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(and (< 0 y_n* 100) (< 1/100000 h 1/10) (< 50 c 200))",":example":"((h 1/10) (y_n* 101/10) (c 1001/10))",":name":"Runge-Kutta 4",":description":"Solve the differential equation `y' = (c - y)^2\nInputs: Step size `h`; initial condition `y_n*`; paramter `c`"},{"body":"(while\n (let ((eps 1/200)) (> e eps))\n ((t 0 (+ t 1/10))\n  (i 0 (+ i 1))\n  (y_n\n   y_n*\n   (let ((y_n1\n          (let ((k4\n                 (let ((k3\n                        (let ((k2\n                               (let ((k1\n                                      (let ((k 6/5))\n                                        (* (* k (- c y_n)) (- c y_n))))\n                                     (k 6/5))\n                                 (*\n                                  (* k (- c (+ y_n (* (* 1/2 h) k1))))\n                                  (- c (+ y_n (* (* 1/2 h) k1))))))\n                              (k 6/5))\n                          (*\n                           (* k (- c (+ y_n (* (* 1/2 h) k2))))\n                           (- c (+ y_n (* (* 1/2 h) k2))))))\n                       (k 6/5))\n                   (* (* k (- c (+ y_n (* h k3)))) (- c (+ y_n (* h k3))))))\n                (k3\n                 (let ((k2\n                        (let ((k1\n                               (let ((k 6/5)) (* (* k (- c y_n)) (- c y_n))))\n                              (k 6/5))\n                          (*\n                           (* k (- c (+ y_n (* (* 1/2 h) k1))))\n                           (- c (+ y_n (* (* 1/2 h) k1))))))\n                       (k 6/5))\n                   (*\n                    (* k (- c (+ y_n (* (* 1/2 h) k2))))\n                    (- c (+ y_n (* (* 1/2 h) k2))))))\n                (k2\n                 (let ((k1 (let ((k 6/5)) (* (* k (- c y_n)) (- c y_n))))\n                       (k 6/5))\n                   (*\n                    (* k (- c (+ y_n (* (* 1/2 h) k1))))\n                    (- c (+ y_n (* (* 1/2 h) k1))))))\n                (k1 (let ((k 6/5)) (* (* k (- c y_n)) (- c y_n))))\n                (sixieme (/ 1 6)))\n            (+ y_n (* (* sixieme h) (+ (+ (+ k1 (* 2 k2)) (* 2 k3)) k4))))))\n     y_n1))\n  (e 1 (let ((eps 1/200)) (- e eps))))\n (let ((e (fabs e))) e))","arguments":["h","y_n*","c"],"operators":["while","let",">","+","*","-","/","fabs"],":cite":["damouche-martel-chapoutot-fmics15"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(and (< 0 y_n* 100) (< 1/100000 h 1/10) (< 50 c 200))",":example":"((h 1/10) (y_n* 101/10) (c 1001/10))",":name":"Runge-Kutta 4",":description":"Solve the differential equation `y' = (c - y)^2\nInputs: Step size `h`; initial condition `y_n*`; paramter `c`"},{"body":"(while\n (let ((eps 1/100)) (> e eps))\n ((xc0\n   0\n   (let ((yc\n          (let ((yc (let ((yc (- y yd))) (if (< yc -1) -1 yc))))\n            (if (< 1 yc) 1 yc)))\n         (Bc0 1)\n         (Ac01 -1/20)\n         (Ac00 499/1000))\n     (+ (* Ac00 xc0) (+ (* Ac01 xc1) (* Bc0 yc)))))\n  (xc1\n   0\n   (let ((yc\n          (let ((yc (let ((yc (- y yd))) (if (< yc -1) -1 yc))))\n            (if (< 1 yc) 1 yc)))\n         (Bc1 0)\n         (Ac11 1)\n         (xc0\n          (let ((yc\n                 (let ((yc (let ((yc (- y yd))) (if (< yc -1) -1 yc))))\n                   (if (< 1 yc) 1 yc)))\n                (Bc0 1)\n                (Ac01 -1/20)\n                (Ac00 499/1000))\n            (+ (* Ac00 xc0) (+ (* Ac01 xc1) (* Bc0 yc)))))\n         (Ac10 1/100))\n     (+ (* Ac10 xc0) (+ (* Ac11 xc1) (* Bc1 yc)))))\n  (i 0 (+ i 1))\n  (e\n   1\n   (let ((xc1\n          (let ((yc\n                 (let ((yc (let ((yc (- y yd))) (if (< yc -1) -1 yc))))\n                   (if (< 1 yc) 1 yc)))\n                (Bc1 0)\n                (Ac11 1)\n                (xc0\n                 (let ((yc\n                        (let ((yc (let ((yc (- y yd))) (if (< yc -1) -1 yc))))\n                          (if (< 1 yc) 1 yc)))\n                       (Bc0 1)\n                       (Ac01 -1/20)\n                       (Ac00 499/1000))\n                   (+ (* Ac00 xc0) (+ (* Ac01 xc1) (* Bc0 yc)))))\n                (Ac10 1/100))\n            (+ (* Ac10 xc0) (+ (* Ac11 xc1) (* Bc1 yc)))))\n         (yc\n          (let ((yc (let ((yc (- y yd))) (if (< yc -1) -1 yc))))\n            (if (< 1 yc) 1 yc))))\n     (fabs (- yc xc1)))))\n xc1)","arguments":["y","yd"],"operators":["while","let",">","-","if","<","+","*","fabs"],":cite":["feron-ieee10","damouche-martel-chapoutot-fmics15"],":fpbench-domain":"controls",":precision":"binary32",":pre":"(and (< 0 yd 50) (< 0 y 50))",":example":"((y 5/2) (yd 5))",":name":"Lead-lag System",":description":"Move a mass from an initial position to a desired position.\nInputs: Initial position `y`; desired position `yd`"},{"body":"(while\n (< xa 5000)\n ((r\n   0\n   (let ((h (let ((n 25) (a 1/4) (b 5000)) (/ (- b a) n)))\n         (gxb\n          (let ((xb\n                 (let ((xb\n                        (let ((h\n                               (let ((n 25) (a 1/4) (b 5000)) (/ (- b a) n))))\n                          (+ xa h))))\n                   (if (let ((xb\n                              (let ((h\n                                     (let ((n 25) (a 1/4) (b 5000))\n                                       (/ (- b a) n))))\n                                (+ xa h))))\n                         (> xb 5000))\n                     5000\n                     xb))))\n            (/\n             u\n             (-\n              (+ (- (* (* (* 7/10 xb) xb) xb) (* (* 3/5 xb) xb)) (* 9/10 xb))\n              1/5))))\n         (gxa\n          (/\n           u\n           (-\n            (+ (- (* (* (* 7/10 xa) xa) xa) (* (* 3/5 xa) xa)) (* 9/10 xa))\n            1/5))))\n     (+ r (* (* (+ gxa gxb) 1/2) h))))\n  (xa 1/4 (let ((h (let ((n 25) (a 1/4) (b 5000)) (/ (- b a) n)))) (+ xa h))))\n r)","arguments":["u"],"operators":["while","<","let","/","-","+","if",">","*"],":cite":["damouche-martel-chapoutot-fmics15"],":fpbench-domain":"mathematics",":pre":"(<= 111/100 u 111/50)",":name":"Trapeze"},{"body":"(while\n (< i 2000000)\n ((x\n   0\n   (let ((c\n          (let ((u3_i (let ((dt 1/10)) (+ (* u4_im1 dt) u3_im1)))) (cos u3_i)))\n         (u1_i (let ((dt 1/10)) (+ (* u2_im1 dt) u1_im1))))\n     (* u1_i c)))\n  (i 1 (+ i 1))\n  (u1_im1\n   (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))) r0)\n   (let ((u1_i (let ((dt 1/10)) (+ (* u2_im1 dt) u1_im1)))) u1_i))\n  (u2_im1\n   (let ((vr0 0)) vr0)\n   (let ((u2_i\n          (let ((dt 1/10)\n                (Mt 5973600000000000000000000)\n                (G 166857/2500000000000000))\n            (+\n             (* (* G (/ Mt (* u1_im1 u1_im1))) dt)\n             (* (* (* u1_im1 u4_im1) u4_im1) dt)))))\n     u2_i))\n  (u3_im1\n   (let ((teta0 0)) teta0)\n   (let ((u3_i (let ((dt 1/10)) (+ (* u4_im1 dt) u3_im1)))) u3_i))\n  (u4_im1\n   (let ((vteta0\n          (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))\n                (viss\n                 (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))\n                       (Mt 5973600000000000000000000)\n                       (G 166857/2500000000000000))\n                   (sqrt (/ (* G Mt) r0)))))\n            (/ viss r0))))\n     vteta0)\n   (let ((u4_i\n          (let ((dt 1/10))\n            (+ (* (* -2 (* u2_im1 (/ u4_im1 u1_im1))) dt) u4_im1))))\n     u4_i))\n  (w1_im1\n   (let ((rf (let ((R 6400000)) R))) rf)\n   (let ((w1_i (let ((dt 1/10)) (+ (* w2_im1 dt) w1_im1)))) w1_i))\n  (w2_im1\n   (let ((vrf 0)) vrf)\n   (let ((w2_i\n          (let ((dt 1/10)\n                (Mt 5973600000000000000000000)\n                (G 166857/2500000000000000))\n            (+\n             (+\n              (+\n               (* (* G (/ Mt (* w1_im1 w1_im1))) dt)\n               (* (* (* w1_im1 w4_im1) w4_im1) dt))\n              (if (> mf_im1 0) (* (/ (* A w2_im1) (- Mf (* A t_im1))) dt) 0))\n             w2_im1))))\n     w2_i))\n  (w3_im1\n   (let ((tetaf 0)) tetaf)\n   (let ((w3_i (let ((dt 1/10)) (+ (* w4_im1 dt) w3_im1)))) w3_i))\n  (w4_im1\n   (let ((vtetaf\n          (let ((vlrad\n                 (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))\n                       (vl\n                        (let ((R 6400000)\n                              (Mt 5973600000000000000000000)\n                              (G 166857/2500000000000000))\n                          (sqrt (/ (* G Mt) R)))))\n                   (/ vl r0))))\n            (* 11/10 vlrad))))\n     vtetaf)\n   (let ((w4_i\n          (let ((dt 1/10))\n            (+\n             (* (* -2 (* w2_im1 (/ w4_im1 w1_im1))) dt)\n             (+\n              (if (> mf_im1 0) (* A (* (/ w4_im1 (- Mf (* A t_im1))) dt)) 0)\n              w4_im1)))))\n     w4_i))\n  (t_im1 0 (let ((t_i (let ((dt 1/10)) (+ t_im1 dt)))) t_i))\n  (mf_im1 Mf (let ((mf_i (- mf_im1 (* A t_im1)))) mf_i)))\n x)","arguments":["Mf","A"],"operators":["while","<","let","+","*","sqrt","/","cos","if",">","-"],":cite":["damouche-martel-chapoutot-cf15"],":fpbench-domain":"controls",":precision":"binary32",":example":"((Mf 150000) (A 140))",":name":"Rocket Trajectory",":description":"Compute the trajectory of a rocket around the earth.\nInputs: Mass `Mf`; acceleration `A`"},{"body":"(while\n (< i 2000000)\n ((y\n   0\n   (let ((s\n          (let ((u3_i (let ((dt 1/10)) (+ (* u4_im1 dt) u3_im1)))) (sin u3_i)))\n         (u1_i (let ((dt 1/10)) (+ (* u2_im1 dt) u1_im1))))\n     (* u1_i s)))\n  (i 1 (+ i 1))\n  (u1_im1\n   (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))) r0)\n   (let ((u1_i (let ((dt 1/10)) (+ (* u2_im1 dt) u1_im1)))) u1_i))\n  (u2_im1\n   (let ((vr0 0)) vr0)\n   (let ((u2_i\n          (let ((dt 1/10)\n                (Mt 5973600000000000000000000)\n                (G 166857/2500000000000000))\n            (+\n             (* (* G (/ Mt (* u1_im1 u1_im1))) dt)\n             (* (* (* u1_im1 u4_im1) u4_im1) dt)))))\n     u2_i))\n  (u3_im1\n   (let ((teta0 0)) teta0)\n   (let ((u3_i (let ((dt 1/10)) (+ (* u4_im1 dt) u3_im1)))) u3_i))\n  (u4_im1\n   (let ((vteta0\n          (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))\n                (viss\n                 (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))\n                       (Mt 5973600000000000000000000)\n                       (G 166857/2500000000000000))\n                   (sqrt (/ (* G Mt) r0)))))\n            (/ viss r0))))\n     vteta0)\n   (let ((u4_i\n          (let ((dt 1/10))\n            (+ (* (* -2 (* u2_im1 (/ u4_im1 u1_im1))) dt) u4_im1))))\n     u4_i))\n  (w1_im1\n   (let ((rf (let ((R 6400000)) R))) rf)\n   (let ((w1_i (let ((dt 1/10)) (+ (* w2_im1 dt) w1_im1)))) w1_i))\n  (w2_im1\n   (let ((vrf 0)) vrf)\n   (let ((w2_i\n          (let ((dt 1/10)\n                (Mt 5973600000000000000000000)\n                (G 166857/2500000000000000))\n            (+\n             (+\n              (+\n               (* (* G (/ Mt (* w1_im1 w1_im1))) dt)\n               (* (* (* w1_im1 w4_im1) w4_im1) dt))\n              (if (> mf_im1 0) (* (/ (* A w2_im1) (- Mf (* A t_im1))) dt) 0))\n             w2_im1))))\n     w2_i))\n  (w3_im1\n   (let ((tetaf 0)) tetaf)\n   (let ((w3_i (let ((dt 1/10)) (+ (* w4_im1 dt) w3_im1)))) w3_i))\n  (w4_im1\n   (let ((vtetaf\n          (let ((vlrad\n                 (let ((r0 (let ((R 6400000)) (+ (* 400 10000) R)))\n                       (vl\n                        (let ((R 6400000)\n                              (Mt 5973600000000000000000000)\n                              (G 166857/2500000000000000))\n                          (sqrt (/ (* G Mt) R)))))\n                   (/ vl r0))))\n            (* 11/10 vlrad))))\n     vtetaf)\n   (let ((w4_i\n          (let ((dt 1/10))\n            (+\n             (* (* -2 (* w2_im1 (/ w4_im1 w1_im1))) dt)\n             (+\n              (if (> mf_im1 0) (* A (* (/ w4_im1 (- Mf (* A t_im1))) dt)) 0)\n              w4_im1)))))\n     w4_i))\n  (t_im1 0 (let ((t_i (let ((dt 1/10)) (+ t_im1 dt)))) t_i))\n  (mf_im1 Mf (let ((mf_i (- mf_im1 (* A t_im1)))) mf_i)))\n y)","arguments":["Mf","A"],"operators":["while","<","let","+","*","sqrt","/","sin","if",">","-"],":cite":["damouche-martel-chapoutot-cf15"],":fpbench-domain":"controls",":precision":"binary32",":example":"((Mf 150000) (A 140))",":name":"Rocket Trajectory",":description":"Compute the trajectory of a rocket around the earth.\nInputs: Mass `Mf`; acceleration `A`"},{"body":"(while\n (let ((eps 1/100000000000000000)) (> e eps))\n ((i 0 (+ i 1))\n  (e\n   1\n   (let ((e\n          (let ((x_n4\n                 (-\n                  (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n                  (* (/ 3/10 a44) x3))))\n            (- x_n4 x4))))\n     (fabs e)))\n  (x1\n   0\n   (let ((x_n1\n          (+\n           (- (- (/ b1 a11) (* (/ 1/10 a11) x2)) (* (/ 1/5 a11) x3))\n           (* (/ 3/10 a11) x4))))\n     x_n1))\n  (x2\n   0\n   (let ((x_n2\n          (-\n           (+ (- (/ b2 a22) (* (/ 3/10 a22) x1)) (* (/ 1/10 a22) x3))\n           (* (/ 1/5 a22) x4))))\n     x_n2))\n  (x3\n   0\n   (let ((x_n3\n          (-\n           (+ (- (/ b3 a33) (* (/ 1/5 a33) x1)) (* (/ 3/10 a33) x2))\n           (* (/ 1/10 a33) x4))))\n     x_n3))\n  (x4\n   0\n   (let ((x_n4\n          (-\n           (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n           (* (/ 3/10 a44) x3))))\n     x_n4)))\n i)","arguments":["a11","a22","a33","a44","b1","b2","b3","b4"],"operators":["while","let",">","+","-","/","*","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":example":"((a11 61/100)\n (a22 31/50)\n (a33 3003/5000)\n (a44 601/1000)\n (b1 1/2)\n (b2 (/ 1 3))\n (b3 1/4)\n (b4 (/ 1 5)))",":name":"Jacobi's Method",":description":"Solve a linear system `Ax = b`.\nInputs: Array entries `aij`; vector entries `bi`"},{"body":"(while\n (let ((eps 1/100000000000000000)) (> e eps))\n ((x_n2\n   0\n   (-\n    (+ (- (/ b2 a22) (* (/ 3/10 a22) x1)) (* (/ 1/10 a22) x3))\n    (* (/ 1/5 a22) x4)))\n  (i 0 (+ i 1))\n  (e\n   1\n   (let ((e\n          (let ((x_n4\n                 (-\n                  (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n                  (* (/ 3/10 a44) x3))))\n            (- x_n4 x4))))\n     (fabs e)))\n  (x1\n   0\n   (let ((x_n1\n          (+\n           (- (- (/ b1 a11) (* (/ 1/10 a11) x2)) (* (/ 1/5 a11) x3))\n           (* (/ 3/10 a11) x4))))\n     x_n1))\n  (x2\n   0\n   (let ((x_n2\n          (-\n           (+ (- (/ b2 a22) (* (/ 3/10 a22) x1)) (* (/ 1/10 a22) x3))\n           (* (/ 1/5 a22) x4))))\n     x_n2))\n  (x3\n   0\n   (let ((x_n3\n          (-\n           (+ (- (/ b3 a33) (* (/ 1/5 a33) x1)) (* (/ 3/10 a33) x2))\n           (* (/ 1/10 a33) x4))))\n     x_n3))\n  (x4\n   0\n   (let ((x_n4\n          (-\n           (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n           (* (/ 3/10 a44) x3))))\n     x_n4)))\n x_n2)","arguments":["a11","a22","a33","a44","b1","b2","b3","b4"],"operators":["while","let",">","-","+","/","*","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":example":"((a11 61/100)\n (a22 31/50)\n (a33 3003/5000)\n (a44 601/1000)\n (b1 1/2)\n (b2 (/ 1 3))\n (b3 1/4)\n (b4 (/ 1 5)))",":name":"Jacobi's Method",":description":"Solve a linear system `Ax = b`.\nInputs: Array entries `aij`; vector entries `bi`"},{"body":"(while\n (let ((eps 1/100000000000000000)) (> e eps))\n ((i 0 (+ i 1))\n  (e\n   1\n   (let ((e\n          (let ((x_n4\n                 (-\n                  (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n                  (* (/ 3/10 a44) x3))))\n            (- x_n4 x4))))\n     (fabs e)))\n  (x1\n   0\n   (let ((x_n1\n          (+\n           (- (- (/ b1 a11) (* (/ 1/10 a11) x2)) (* (/ 1/5 a11) x3))\n           (* (/ 3/10 a11) x4))))\n     x_n1))\n  (x2\n   0\n   (let ((x_n2\n          (-\n           (+ (- (/ b2 a22) (* (/ 3/10 a22) x1)) (* (/ 1/10 a22) x3))\n           (* (/ 1/5 a22) x4))))\n     x_n2))\n  (x3\n   0\n   (let ((x_n3\n          (-\n           (+ (- (/ b3 a33) (* (/ 1/5 a33) x1)) (* (/ 3/10 a33) x2))\n           (* (/ 1/10 a33) x4))))\n     x_n3))\n  (x4\n   0\n   (let ((x_n4\n          (-\n           (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n           (* (/ 3/10 a44) x3))))\n     x_n4)))\n x2)","arguments":["a11","a22","a33","a44","b1","b2","b3","b4"],"operators":["while","let",">","+","-","/","*","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":example":"((a11 61/100)\n (a22 31/50)\n (a33 3003/5000)\n (a44 601/1000)\n (b1 1/2)\n (b2 (/ 1 3))\n (b3 1/4)\n (b4 (/ 1 5)))",":name":"Jacobi's Method",":description":"Solve a linear system `Ax = b`.\nInputs: Array entries `aij`; vector entries `bi`"},{"body":"(while\n (let ((eps 1/100000000000000000)) (> e eps))\n ((i 0 (+ i 1))\n  (e\n   1\n   (let ((e\n          (let ((x_n4\n                 (-\n                  (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n                  (* (/ 3/10 a44) x3))))\n            (- x_n4 x4))))\n     (fabs e)))\n  (x1\n   0\n   (let ((x_n1\n          (+\n           (- (- (/ b1 a11) (* (/ 1/10 a11) x2)) (* (/ 1/5 a11) x3))\n           (* (/ 3/10 a11) x4))))\n     x_n1))\n  (x2\n   0\n   (let ((x_n2\n          (-\n           (+ (- (/ b2 a22) (* (/ 3/10 a22) x1)) (* (/ 1/10 a22) x3))\n           (* (/ 1/5 a22) x4))))\n     x_n2))\n  (x3\n   0\n   (let ((x_n3\n          (-\n           (+ (- (/ b3 a33) (* (/ 1/5 a33) x1)) (* (/ 3/10 a33) x2))\n           (* (/ 1/10 a33) x4))))\n     x_n3))\n  (x4\n   0\n   (let ((x_n4\n          (-\n           (- (+ (/ b4 a44) (* (/ 1/10 a44) x1)) (* (/ 1/5 a44) x2))\n           (* (/ 3/10 a44) x3))))\n     x_n4)))\n e)","arguments":["a11","a22","a33","a44","b1","b2","b3","b4"],"operators":["while","let",">","+","-","/","*","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":example":"((a11 61/100)\n (a22 31/50)\n (a33 3003/5000)\n (a44 601/1000)\n (b1 1/2)\n (b2 (/ 1 3))\n (b3 1/4)\n (b4 (/ 1 5)))",":name":"Jacobi's Method",":description":"Solve a linear system `Ax = b`.\nInputs: Array entries `aij`; vector entries `bi`"},{"body":"(while\n (let ((eps 1/2000)) (and (> e eps) (< i 100000)))\n ((e\n   1\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     (fabs (- x x_n))))\n  (x\n   0\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     x_n))\n  (i 0 (+ i 1)))\n i)","arguments":["x0"],"operators":["while","let","and",">","<","+","-","*","/","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(< 0 x0 3)",":example":"((x0 0))",":name":"Newton-Raphson's Method",":description":"Find the zeros of a function `f = (x - 2)**5`.\nInputs: Initial guess `x0`"},{"body":"(while\n (let ((eps 1/2000)) (and (> e eps) (< i 100000)))\n ((e\n   1\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     (fabs (- x x_n))))\n  (x\n   0\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     x_n))\n  (i 0 (+ i 1)))\n x)","arguments":["x0"],"operators":["while","let","and",">","<","+","-","*","/","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(< 0 x0 3)",":example":"((x0 0))",":name":"Newton-Raphson's Method",":description":"Find the zeros of a function `f = (x - 2)**5`.\nInputs: Initial guess `x0`"},{"body":"(while\n (let ((eps 1/2000)) (and (> e eps) (< i 100000)))\n ((x_n\n   0\n   (let ((ff\n          (+\n           (-\n            (+\n             (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n             (* (* 120 x) x))\n            (* 160 x))\n           80))\n         (f\n          (-\n           (+\n            (-\n             (+\n              (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n              (* (* (* 40 x) x) x))\n             (* (* 80 x) x))\n            (* 80 x))\n           32)))\n     (- x (/ f ff))))\n  (e\n   1\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     (fabs (- x x_n))))\n  (x\n   0\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     x_n))\n  (i 0 (+ i 1)))\n x_n)","arguments":["x0"],"operators":["while","let","and",">","<","+","-","*","/","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(< 0 x0 3)",":example":"((x0 0))",":name":"Newton-Raphson's Method",":description":"Find the zeros of a function `f = (x - 2)**5`.\nInputs: Initial guess `x0`"},{"body":"(while\n (let ((eps 1/2000)) (and (> e eps) (< i 100000)))\n ((e\n   1\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     (fabs (- x x_n))))\n  (x\n   0\n   (let ((x_n\n          (let ((ff\n                 (+\n                  (-\n                   (+\n                    (- (* (* (* (* 5 x) x) x) x) (* (* (* 40 x) x) x))\n                    (* (* 120 x) x))\n                   (* 160 x))\n                  80))\n                (f\n                 (-\n                  (+\n                   (-\n                    (+\n                     (- (* (* (* (* x x) x) x) x) (* (* (* (* 10 x) x) x) x))\n                     (* (* (* 40 x) x) x))\n                    (* (* 80 x) x))\n                   (* 80 x))\n                  32)))\n            (- x (/ f ff)))))\n     x_n))\n  (i 0 (+ i 1)))\n e)","arguments":["x0"],"operators":["while","let","and",">","<","+","-","*","/","fabs"],":cite":["atkinson-1989"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(< 0 x0 3)",":example":"((x0 0))",":name":"Newton-Raphson's Method",":description":"Find the zeros of a function `f = (x - 2)**5`.\nInputs: Initial guess `x0`"},{"body":"(while\n (let ((eps 1/2000)) (> e eps))\n ((i 0 (+ i 1))\n  (v1\n   v1\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n     (/ vx vw)))\n  (v2\n   v2\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vy (+ (+ (+ (* a21 v1) (* a22 v2)) (* a23 v3)) (* a24 v4))))\n     (/ vy vw)))\n  (v3\n   v3\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vz (+ (+ (+ (* a31 v1) (* a32 v2)) (* a33 v3)) (* a34 v4))))\n     (/ vz vw)))\n  (v4 v4 1)\n  (e\n   1\n   (let ((v1\n          (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n                (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n            (/ vx vw))))\n     (fabs (- 1 v1)))))\n i)","arguments":["a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","v1","v2","v3","v4"],"operators":["while","let",">","+","*","/","fabs","-"],":cite":["golub-vanloan-1996"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(<\n 150\n (-\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a33) a44) (* (* (* a12 a23) a34) a41))\n            (* (* (* a13 a24) a31) a42))\n           (* (* (* a14 a21) a32) a43))\n          (* (* (* a11 a23) a34) a42))\n         (* (* (* a12 a21) a33) a44))\n        (* (* (* a13 a21) a32) a44))\n       (* (* (* a14 a22) a33) a41))\n      (* (* (* a11 a24) a32) a43))\n     (* (* (* a12 a24) a31) a43))\n    (* (* (* a13 a22) a34) a41))\n   (* (* (* a14 a23) a31) a42))\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a34) a43) (* (* (* a12 a23) a31) a44))\n            (* (* (* a13 a24) a32) a41))\n           (* (* (* a14 a21) a33) a42))\n          (* (* (* a11 a23) a32) a44))\n         (* (* (* a12 a21) a34) a43))\n        (* (* (* a13 a21) a34) a42))\n       (* (* (* a14 a22) a31) a43))\n      (* (* (* a11 a24) a33) a42))\n     (* (* (* a12 a24) a33) a41))\n    (* (* (* a13 a22) a31) a44))\n   (* (* (* a14 a23) a32) a41)))\n 200)",":example":"((a11 150)\n (a12 1/100)\n (a13 1/100)\n (a14 1/100)\n (a21 1/100)\n (a22 150)\n (a23 1/100)\n (a24 1/100)\n (a31 1/100)\n (a32 1/100)\n (a33 150)\n (a34 1/100)\n (a41 1/100)\n (a42 1/100)\n (a43 1/100)\n (a44 150)\n (v1 0)\n (v2 0)\n (v3 0)\n (v4 1))",":name":"Eigenvalue Computation",":description":"Compute the largest eigenvalue of a matrix and return its vector.\nInputs: Matrix `aij`; initial guess `vi` with one nonzero element"},{"body":"(while\n (let ((eps 1/2000)) (> e eps))\n ((i 0 (+ i 1))\n  (v1\n   v1\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n     (/ vx vw)))\n  (v2\n   v2\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vy (+ (+ (+ (* a21 v1) (* a22 v2)) (* a23 v3)) (* a24 v4))))\n     (/ vy vw)))\n  (v3\n   v3\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vz (+ (+ (+ (* a31 v1) (* a32 v2)) (* a33 v3)) (* a34 v4))))\n     (/ vz vw)))\n  (v4 v4 1)\n  (e\n   1\n   (let ((v1\n          (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n                (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n            (/ vx vw))))\n     (fabs (- 1 v1)))))\n v1)","arguments":["a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","v1","v2","v3","v4"],"operators":["while","let",">","+","*","/","fabs","-"],":cite":["golub-vanloan-1996"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(<\n 150\n (-\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a33) a44) (* (* (* a12 a23) a34) a41))\n            (* (* (* a13 a24) a31) a42))\n           (* (* (* a14 a21) a32) a43))\n          (* (* (* a11 a23) a34) a42))\n         (* (* (* a12 a21) a33) a44))\n        (* (* (* a13 a21) a32) a44))\n       (* (* (* a14 a22) a33) a41))\n      (* (* (* a11 a24) a32) a43))\n     (* (* (* a12 a24) a31) a43))\n    (* (* (* a13 a22) a34) a41))\n   (* (* (* a14 a23) a31) a42))\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a34) a43) (* (* (* a12 a23) a31) a44))\n            (* (* (* a13 a24) a32) a41))\n           (* (* (* a14 a21) a33) a42))\n          (* (* (* a11 a23) a32) a44))\n         (* (* (* a12 a21) a34) a43))\n        (* (* (* a13 a21) a34) a42))\n       (* (* (* a14 a22) a31) a43))\n      (* (* (* a11 a24) a33) a42))\n     (* (* (* a12 a24) a33) a41))\n    (* (* (* a13 a22) a31) a44))\n   (* (* (* a14 a23) a32) a41)))\n 200)",":example":"((a11 150)\n (a12 1/100)\n (a13 1/100)\n (a14 1/100)\n (a21 1/100)\n (a22 150)\n (a23 1/100)\n (a24 1/100)\n (a31 1/100)\n (a32 1/100)\n (a33 150)\n (a34 1/100)\n (a41 1/100)\n (a42 1/100)\n (a43 1/100)\n (a44 150)\n (v1 0)\n (v2 0)\n (v3 0)\n (v4 1))",":name":"Eigenvalue Computation",":description":"Compute the largest eigenvalue of a matrix and return its vector.\nInputs: Matrix `aij`; initial guess `vi` with one nonzero element"},{"body":"(while\n (let ((eps 1/2000)) (> e eps))\n ((vz 0 (+ (+ (+ (* a31 v1) (* a32 v2)) (* a33 v3)) (* a34 v4)))\n  (i 0 (+ i 1))\n  (v1\n   v1\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n     (/ vx vw)))\n  (v2\n   v2\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vy (+ (+ (+ (* a21 v1) (* a22 v2)) (* a23 v3)) (* a24 v4))))\n     (/ vy vw)))\n  (v3\n   v3\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vz (+ (+ (+ (* a31 v1) (* a32 v2)) (* a33 v3)) (* a34 v4))))\n     (/ vz vw)))\n  (v4 v4 1)\n  (e\n   1\n   (let ((v1\n          (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n                (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n            (/ vx vw))))\n     (fabs (- 1 v1)))))\n vz)","arguments":["a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","v1","v2","v3","v4"],"operators":["while","let",">","+","*","/","fabs","-"],":cite":["golub-vanloan-1996"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(<\n 150\n (-\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a33) a44) (* (* (* a12 a23) a34) a41))\n            (* (* (* a13 a24) a31) a42))\n           (* (* (* a14 a21) a32) a43))\n          (* (* (* a11 a23) a34) a42))\n         (* (* (* a12 a21) a33) a44))\n        (* (* (* a13 a21) a32) a44))\n       (* (* (* a14 a22) a33) a41))\n      (* (* (* a11 a24) a32) a43))\n     (* (* (* a12 a24) a31) a43))\n    (* (* (* a13 a22) a34) a41))\n   (* (* (* a14 a23) a31) a42))\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a34) a43) (* (* (* a12 a23) a31) a44))\n            (* (* (* a13 a24) a32) a41))\n           (* (* (* a14 a21) a33) a42))\n          (* (* (* a11 a23) a32) a44))\n         (* (* (* a12 a21) a34) a43))\n        (* (* (* a13 a21) a34) a42))\n       (* (* (* a14 a22) a31) a43))\n      (* (* (* a11 a24) a33) a42))\n     (* (* (* a12 a24) a33) a41))\n    (* (* (* a13 a22) a31) a44))\n   (* (* (* a14 a23) a32) a41)))\n 200)",":example":"((a11 150)\n (a12 1/100)\n (a13 1/100)\n (a14 1/100)\n (a21 1/100)\n (a22 150)\n (a23 1/100)\n (a24 1/100)\n (a31 1/100)\n (a32 1/100)\n (a33 150)\n (a34 1/100)\n (a41 1/100)\n (a42 1/100)\n (a43 1/100)\n (a44 150)\n (v1 0)\n (v2 0)\n (v3 0)\n (v4 1))",":name":"Eigenvalue Computation",":description":"Compute the largest eigenvalue of a matrix and return its vector.\nInputs: Matrix `aij`; initial guess `vi` with one nonzero element"},{"body":"(while\n (let ((eps 1/2000)) (> e eps))\n ((i 0 (+ i 1))\n  (v1\n   v1\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n     (/ vx vw)))\n  (v2\n   v2\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vy (+ (+ (+ (* a21 v1) (* a22 v2)) (* a23 v3)) (* a24 v4))))\n     (/ vy vw)))\n  (v3\n   v3\n   (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n         (vz (+ (+ (+ (* a31 v1) (* a32 v2)) (* a33 v3)) (* a34 v4))))\n     (/ vz vw)))\n  (v4 v4 1)\n  (e\n   1\n   (let ((v1\n          (let ((vw (+ (+ (+ (* a41 v1) (* a42 v2)) (* a43 v3)) (* a44 v4)))\n                (vx (+ (+ (+ (* a11 v1) (* a12 v2)) (* a13 v3)) (* a14 v4))))\n            (/ vx vw))))\n     (fabs (- 1 v1)))))\n e)","arguments":["a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","v1","v2","v3","v4"],"operators":["while","let",">","+","*","/","fabs","-"],":cite":["golub-vanloan-1996"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(<\n 150\n (-\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a33) a44) (* (* (* a12 a23) a34) a41))\n            (* (* (* a13 a24) a31) a42))\n           (* (* (* a14 a21) a32) a43))\n          (* (* (* a11 a23) a34) a42))\n         (* (* (* a12 a21) a33) a44))\n        (* (* (* a13 a21) a32) a44))\n       (* (* (* a14 a22) a33) a41))\n      (* (* (* a11 a24) a32) a43))\n     (* (* (* a12 a24) a31) a43))\n    (* (* (* a13 a22) a34) a41))\n   (* (* (* a14 a23) a31) a42))\n  (+\n   (+\n    (+\n     (+\n      (+\n       (+\n        (+\n         (+\n          (+\n           (+\n            (+ (* (* (* a11 a22) a34) a43) (* (* (* a12 a23) a31) a44))\n            (* (* (* a13 a24) a32) a41))\n           (* (* (* a14 a21) a33) a42))\n          (* (* (* a11 a23) a32) a44))\n         (* (* (* a12 a21) a34) a43))\n        (* (* (* a13 a21) a34) a42))\n       (* (* (* a14 a22) a31) a43))\n      (* (* (* a11 a24) a33) a42))\n     (* (* (* a12 a24) a33) a41))\n    (* (* (* a13 a22) a31) a44))\n   (* (* (* a14 a23) a32) a41)))\n 200)",":example":"((a11 150)\n (a12 1/100)\n (a13 1/100)\n (a14 1/100)\n (a21 1/100)\n (a22 150)\n (a23 1/100)\n (a24 1/100)\n (a31 1/100)\n (a32 1/100)\n (a33 150)\n (a34 1/100)\n (a41 1/100)\n (a42 1/100)\n (a43 1/100)\n (a44 150)\n (v1 0)\n (v2 0)\n (v3 0)\n (v4 1))",":name":"Eigenvalue Computation",":description":"Compute the largest eigenvalue of a matrix and return its vector.\nInputs: Matrix `aij`; initial guess `vi` with one nonzero element"},{"body":"(while\n (let ((eps 1/200000)) (> e eps))\n ((qj1\n   Q31\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3)))))\n  (qj2\n   Q32\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n  (qj3\n   Q33\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n  (r1 0 (let ((h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))) (+ r1 h1)))\n  (r2 0 (let ((h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))) (+ r2 h2)))\n  (r3 0 (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))) (+ r3 h3)))\n  (e\n   10\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     (fabs (- 1 (/ rjj rold)))))\n  (i 1 (+ i 1))\n  (rold\n   (let ((r\n          (let ((qj3 Q33) (qj2 Q32) (qj1 Q31))\n            (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n     (sqrt r))\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     rjj)))\n i)","arguments":["Q11","Q12","Q13","Q21","Q22","Q23","Q31","Q32","Q33"],"operators":["while","let",">","+","*","sqrt","-","fabs","/"],":cite":["abdelmalek-bit71","golub-vanloan-1996","hernandez-roman-tomas-vidal-tr07"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(and (< 1 Q11 (/ 1 7)) (< 1 Q22 (/ 1 25)))",":example":"((Q11 (/ 1 63))\n (Q12 0)\n (Q13 0)\n (Q21 0)\n (Q22 (/ 1 225))\n (Q23 0)\n (Q31 (/ 1 2592))\n (Q32 (/ 1 2601))\n (Q33 (/ 1 2583)))",":name":"Iterative Gram-Schmidt Method",":description":"Orthogonalize a set of non-zero vectors in a Euclidian or Hermitian space.\nInputs: Vectors `Qij`"},{"body":"(while\n (let ((eps 1/200000)) (> e eps))\n ((qj1\n   Q31\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3)))))\n  (qj2\n   Q32\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n  (qj3\n   Q33\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n  (r1 0 (let ((h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))) (+ r1 h1)))\n  (r2 0 (let ((h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))) (+ r2 h2)))\n  (r3 0 (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))) (+ r3 h3)))\n  (e\n   10\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     (fabs (- 1 (/ rjj rold)))))\n  (i 1 (+ i 1))\n  (rold\n   (let ((r\n          (let ((qj3 Q33) (qj2 Q32) (qj1 Q31))\n            (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n     (sqrt r))\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     rjj)))\n qj1)","arguments":["Q11","Q12","Q13","Q21","Q22","Q23","Q31","Q32","Q33"],"operators":["while","let",">","+","*","sqrt","-","fabs","/"],":cite":["abdelmalek-bit71","golub-vanloan-1996","hernandez-roman-tomas-vidal-tr07"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(and (< 1 Q11 (/ 1 7)) (< 1 Q22 (/ 1 25)))",":example":"((Q11 (/ 1 63))\n (Q12 0)\n (Q13 0)\n (Q21 0)\n (Q22 (/ 1 225))\n (Q23 0)\n (Q31 (/ 1 2592))\n (Q32 (/ 1 2601))\n (Q33 (/ 1 2583)))",":name":"Iterative Gram-Schmidt Method",":description":"Orthogonalize a set of non-zero vectors in a Euclidian or Hermitian space.\nInputs: Vectors `Qij`"},{"body":"(while\n (let ((eps 1/200000)) (> e eps))\n ((qj1\n   Q31\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3)))))\n  (qj2\n   Q32\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n  (qj3\n   Q33\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n  (r1 0 (let ((h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))) (+ r1 h1)))\n  (r2 0 (let ((h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))) (+ r2 h2)))\n  (r3 0 (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))) (+ r3 h3)))\n  (e\n   10\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     (fabs (- 1 (/ rjj rold)))))\n  (i 1 (+ i 1))\n  (rold\n   (let ((r\n          (let ((qj3 Q33) (qj2 Q32) (qj1 Q31))\n            (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n     (sqrt r))\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     rjj)))\n qj2)","arguments":["Q11","Q12","Q13","Q21","Q22","Q23","Q31","Q32","Q33"],"operators":["while","let",">","+","*","sqrt","-","fabs","/"],":cite":["abdelmalek-bit71","golub-vanloan-1996","hernandez-roman-tomas-vidal-tr07"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(and (< 1 Q11 (/ 1 7)) (< 1 Q22 (/ 1 25)))",":example":"((Q11 (/ 1 63))\n (Q12 0)\n (Q13 0)\n (Q21 0)\n (Q22 (/ 1 225))\n (Q23 0)\n (Q31 (/ 1 2592))\n (Q32 (/ 1 2601))\n (Q33 (/ 1 2583)))",":name":"Iterative Gram-Schmidt Method",":description":"Orthogonalize a set of non-zero vectors in a Euclidian or Hermitian space.\nInputs: Vectors `Qij`"},{"body":"(while\n (let ((eps 1/200000)) (> e eps))\n ((qj1\n   Q31\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3)))))\n  (qj2\n   Q32\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n  (qj3\n   Q33\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n  (r1 0 (let ((h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))) (+ r1 h1)))\n  (r2 0 (let ((h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))) (+ r2 h2)))\n  (r3 0 (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))) (+ r3 h3)))\n  (e\n   10\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     (fabs (- 1 (/ rjj rold)))))\n  (i 1 (+ i 1))\n  (rold\n   (let ((r\n          (let ((qj3 Q33) (qj2 Q32) (qj1 Q31))\n            (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n     (sqrt r))\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     rjj)))\n qj3)","arguments":["Q11","Q12","Q13","Q21","Q22","Q23","Q31","Q32","Q33"],"operators":["while","let",">","+","*","sqrt","-","fabs","/"],":cite":["abdelmalek-bit71","golub-vanloan-1996","hernandez-roman-tomas-vidal-tr07"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(and (< 1 Q11 (/ 1 7)) (< 1 Q22 (/ 1 25)))",":example":"((Q11 (/ 1 63))\n (Q12 0)\n (Q13 0)\n (Q21 0)\n (Q22 (/ 1 225))\n (Q23 0)\n (Q31 (/ 1 2592))\n (Q32 (/ 1 2601))\n (Q33 (/ 1 2583)))",":name":"Iterative Gram-Schmidt Method",":description":"Orthogonalize a set of non-zero vectors in a Euclidian or Hermitian space.\nInputs: Vectors `Qij`"},{"body":"(while\n (let ((eps 1/200000)) (> e eps))\n ((qj1\n   Q31\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3)))))\n  (qj2\n   Q32\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n  (qj3\n   Q33\n   (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n         (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n         (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n     (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n  (r1 0 (let ((h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3)))) (+ r1 h1)))\n  (r2 0 (let ((h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))) (+ r2 h2)))\n  (r3 0 (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))) (+ r3 h3)))\n  (e\n   10\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     (fabs (- 1 (/ rjj rold)))))\n  (i 1 (+ i 1))\n  (rold\n   (let ((r\n          (let ((qj3 Q33) (qj2 Q32) (qj1 Q31))\n            (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n     (sqrt r))\n   (let ((rjj\n          (let ((r\n                 (let ((qj3\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj3 (+ (+ (* Q31 h1) (* Q32 h2)) (* Q33 h3)))))\n                       (qj2\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj2 (+ (+ (* Q21 h1) (* Q22 h2)) (* Q23 h3)))))\n                       (qj1\n                        (let ((h3 (+ (+ (* Q13 qj1) (* Q23 qj2)) (* Q33 qj3)))\n                              (h2 (+ (+ (* Q12 qj1) (* Q22 qj2)) (* Q32 qj3)))\n                              (h1 (+ (+ (* Q11 qj1) (* Q21 qj2)) (* Q31 qj3))))\n                          (- qj1 (+ (+ (* Q11 h1) (* Q12 h2)) (* Q13 h3))))))\n                   (+ (+ (* qj1 qj1) (* qj2 qj2)) (* qj3 qj3)))))\n            (sqrt r))))\n     rjj)))\n e)","arguments":["Q11","Q12","Q13","Q21","Q22","Q23","Q31","Q32","Q33"],"operators":["while","let",">","+","*","sqrt","-","fabs","/"],":cite":["abdelmalek-bit71","golub-vanloan-1996","hernandez-roman-tomas-vidal-tr07"],":fpbench-domain":"mathematics",":precision":"binary32",":pre":"(and (< 1 Q11 (/ 1 7)) (< 1 Q22 (/ 1 25)))",":example":"((Q11 (/ 1 63))\n (Q12 0)\n (Q13 0)\n (Q21 0)\n (Q22 (/ 1 225))\n (Q23 0)\n (Q31 (/ 1 2592))\n (Q32 (/ 1 2601))\n (Q33 (/ 1 2583)))",":name":"Iterative Gram-Schmidt Method",":description":"Orthogonalize a set of non-zero vectors in a Euclidian or Hermitian space.\nInputs: Vectors `Qij`"}]);
